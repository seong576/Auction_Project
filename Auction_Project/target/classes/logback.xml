<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
 
    <!-- logback 환경 설정파일 -->
 	<!-- 콘솔창에 로그 남김 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
 	<!-- 파일에도 로그를 남김 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/Users/hyeonseuk/Documents/java/chap20_mybatis01_hikaripool/src/main/resources/log/labatory.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>labatory.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
 
 		<withJansi>true</withJansi>
 
        <encoder>
	         <!--
	         %d{yyyy-MM-dd HH:mm:ss} : 년월일 시분초
	         %thread : thread name 
	         %-5level : log level , -5는 출력 고정폭 값
	         %logger{length} :Logger name의 이름, {length}는 자리수
	         %msg : log message %message은 alias
	         %n : 줄바꿈
	 
	         org.fusesource.jansi:jansi:1.8 가 필요.
	                        Linux ,Mac OS X 기본 지원
	                        <withJansi>true</withJansi>설정후 사용해야 함
	         %highlight : log level별로 color 차별화
	         -->
        	<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
 
    <logger name="org.springframework" level="info"/>
    <logger name="org.mybatis" level="debug"/>
 
 	<!--JdbcTemplate SQL관련 설정 -->
	<logger name="org.springframework.jdbc.core.StatementCreatorUtils"
		additivity="false" level="TRACE">
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="org.springframework.jdbc.core" additivity="true">
		<level value="DEBUG" />
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="java.sql.Connection" additivity="true">
		<level value="DEBUG" />
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="java.sql.Statement" additivity="true">
		<level value="DEBUG" />
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="java.sql.PreparedStatement" additivity="true">
		<level value="DEBUG" />
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="java.sql.ResultSet" additivity="true">
		<level value="DEBUG" />
		<appender-ref ref="CONSOLE" />
	</logger>
 
	
	<!-- SQL문만 로그로 남김 , PreparedStatement에서는 args가 값으로 채워저서 출력 -->
	<logger name = "jdbc.sqlonly" level="DEBUG"></logger>
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간을 포함 -->
	<logger name = "jdbc.sqltiming" level="DEBUG"></logger>
	<!-- ResultSet를 제외한 모든 JDBC 호출 정보 로그를 남긴다.
		 특별히 JDBC 문제추적이 필요할 경우만 사용  -->
	<logger name = "jdbc.aduit" level="ERROR"></logger>
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남긴다. 
		방대한 양의 로그 생성 -->
	<logger name = "jdbc.resultset" level="ERROR"></logger>
 
    <root level="info">
        <appender-ref ref="CONSOLE"/> <!-- Console에 로그를 출력하고자 할 때 사용 -->
        <appender-ref ref="FILE"/> <!-- File로 로그를 남기고자 할 때 사용 -->
    </root>
 
</configuration>